From 34c3d5921dca74936256e84952e2af8b4990a1a2 Mon Sep 17 00:00:00 2001
From: Kafva <36083692+Kafva@users.noreply.github.com>
Date: Fri, 2 Feb 2024 06:01:57 +0100
Subject: [PATCH 1/1] Print debugging output

---
 sha224-256.c | 30 +++++++++++++++++++++++++++++-
 shatest.c    | 30 +++++++++++++++---------------
 2 files changed, 44 insertions(+), 16 deletions(-)

diff --git a/sha224-256.c b/sha224-256.c
index 88ed4c4..9661e6a 100644
--- a/sha224-256.c
+++ b/sha224-256.c
@@ -42,6 +42,7 @@
 
 #include "sha.h"
 #include "sha-private.h"
+#include <stdio.h>
 
 /* Define the SHA shift, rotate left, and rotate right macros */
 #define SHA256_SHR(bits,word)      ((word) >> (bits))
@@ -361,6 +362,32 @@ static int SHA224_256Reset(SHA256Context *context, uint32_t *H0)
     return shaSuccess;
 }
 
+static void dumpBytes(char *label, uint8_t *input, int count) {
+    printf("\033[33mRFC\033[0m: %s = [", label);
+    for (int i = 0; i < count; i++) {
+        printf("0x%02x", input[i]);
+        if (i != count - 1) {
+            printf(", ");
+        } else {
+            printf(" ");
+        }
+    }
+    printf("]\n");
+}
+
+static void dumpWords(char *label, uint32_t *input, int idx, int count) {
+    printf("\033[33mRFC\033[0m: [%d] %s = [", idx, label);
+    for (int i = 0; i < count; i++) {
+        printf("%u", input[i]);
+        if (i != count - 1) {
+            printf(", ");
+        } else {
+            printf(" ");
+        }
+    }
+    printf("]\n");
+}
+
 /*
  * SHA224_256ProcessMessageBlock
  *
@@ -423,6 +450,7 @@ static void SHA224_256ProcessMessageBlock(SHA256Context *context)
     F = context->Intermediate_Hash[5];
     G = context->Intermediate_Hash[6];
     H = context->Intermediate_Hash[7];
+    dumpWords("Intermediate_Hash", (uint32_t*)(context->Intermediate_Hash), 0, 8);
 
     for (t = 0; t < 64; t++) {
         temp1 = H + SHA256_SIGMA1(E) + SHA_Ch(E,F,G) + K[t] + W[t];
@@ -577,4 +605,4 @@ static int SHA224_256ResultN(SHA256Context *context,
                 (context->Intermediate_Hash[i>>2] >> 8 * ( 3 - ( i & 0x03 ) ));
 
     return shaSuccess;
-}
\ No newline at end of file
+}
diff --git a/shatest.c b/shatest.c
index 6a149b6..d83c48f 100644
--- a/shatest.c
+++ b/shatest.c
@@ -841,8 +841,8 @@ void printResult(uint8_t *Message_Digest, int hashsize,
 {
     int i, k;
     if (printResults == PRINTTEXT) {
-        printf("\nhashsize=%d\n", hashsize);
-        putchar('\t');
+        //printf("\nhashsize=%d\n", hashsize);
+        //putchar('\t');
         for (i = 0; i < hashsize; ++i) {
             putchar(hexdigits[(Message_Digest[i] >> 4) & 0xF]);
             putchar(hexdigits[Message_Digest[i] & 0xF]);
@@ -915,16 +915,16 @@ int hash(int testno, int loopno, int hashno,
     uint8_t *Message_Digest = Message_Digest_Buf;
     char buf[20];
 
-    if (printResults == PRINTTEXT) {
-        printf("\nTest %d: Iteration %d, Repeat %ld\n\t'", testno+1,
-               loopno, repeatcount);
-        printstr(testarray, length);
-        printf("'\n\t'");
-        printxstr(testarray, length);
-        printf("'\n");
-        printf("    Length=%d bytes (%d bits), ", length, length * 8);
-        printf("ExtraBits %d: %2.2x\n", numberExtrabits, extrabits);
-    }
+    // if (printResults == PRINTTEXT) {
+    //     printf("\nTest %d: Iteration %d, Repeat %ld\n\t'", testno+1,
+    //            loopno, repeatcount);
+    //     printstr(testarray, length);
+    //     printf("'\n\t'");
+    //     printxstr(testarray, length);
+    //     printf("'\n");
+    //     printf("    Length=%d bytes (%d bits), ", length, length * 8);
+    //     printf("ExtraBits %d: %2.2x\n", numberExtrabits, extrabits);
+    // }
 
     if (info) Message_Digest = malloc(okmlen);
     memset(&sha, '\343', sizeof(sha)); /* force bad data into struct */
@@ -1412,8 +1412,8 @@ int main(int argc, char **argv)
      *  Perform SHA/HMAC tests
      */
     for (hashno = hashnolow; hashno <= hashnohigh; ++hashno) {
-        if (printResults == PRINTTEXT)
-            printf("Hash %s\n", hashes[hashno].name);
+        // if (printResults == PRINTTEXT)
+        //     printf("Hash %s\n", hashes[hashno].name);
         err = shaSuccess;
 
         for (loopno = 1; (loopno <= loopnohigh) && (err == shaSuccess);
@@ -1521,4 +1521,4 @@ int scasecmp(const char *s1, const char *s2)
         if (u1 == '\0')
             return 0;
     }
-}
\ No newline at end of file
+}
-- 
2.43.0

